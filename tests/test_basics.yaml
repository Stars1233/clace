tests:
  basic010:
    command: ../clace app list /invalid # Connects over UDS
    stdout:
      line-count: 1 # Only header is printed
    exit-code: 0
  basic020:
    command: ../clace app list --server_uri=http://localhost:9154 /invalid # Wrong password
    stderr:
      exactly: "error: 404 page not found" # admin api's are disabled over http
    stdout:
      line-count: 0
    exit-code: 1

  basic030:
    command: ../clace app list --server_uri=http://localhost:9154 --admin_password=abcd /invalid # No app
    stderr:
      exactly: "error: 404 page not found" # admin api's are disabled over http
    stdout:
      line-count: 0
    exit-code: 1

  basic040:
    command: ../clace app list --server_uri=https://localhost:9155 --admin_password=abcd /invalid # Test TLS
    stderr: "tls: failed to verify certificate"
    stdout:
      line-count: 0
    exit-code: 1

  basic050:
    command: ../clace app list --server_uri=https://localhost:9155 --admin_password=abcd --skip_cert_check /invalid # TLS with skip_cert_check
    stderr: "error: 404 page not found" # admin api's are disabled over http
    stdout:
      line-count: 0
    exit-code: 1

  basic060: ## create test1 app with default of authentication enabled
    command: ../clace app create /test1 ./testapp
    exit-code: 0

  basic070: # check curl works with password
    command: curl -sS -u "admin:abcd" localhost:9154/test1
    stdout: "Test app body"

  basic080: # check curl fails without password
    command: curl -sS localhost:9154/test1
    stdout:
      exactly: "Authentication failed"

  basic090: # check curl fails with wrong password
    command: curl -sS -u "admin:abcd2" localhost:9154/test1
    stdout:
      exactly: "Authentication failed"

  basic100: # check curl fails with wrong user
    command: curl -sS -u "admin2:abcd" localhost:9154/test1
    stdout:
      exactly: "Authentication failed"

  basic160: ## create test2 app with authentication disabled
    command: ../clace app create --auth_type=none /test2 ./testapp
    exit-code: 0

  basic161: ## Check static files are using optimized fetch path (no compression/decompression)
    ## The data should be streamed directly from sqlite. x-clace-compressed header should be true
    command: 'curl -sI -H "Accept-Encoding: gzip" localhost:9154/test2/static/gen/lib/htmx-fd346e9c8639d4624893fc455f2407a09b418301736dd18ebbb07764637fb478.min.js | grep -e "X-Clace-Compressed: true" -e "Content-Encoding: gzip" -e "Content-Length: 14213" | wc -l'
    stdout:
      exactly: "3"
    exit-code: 0

  basic170: # check curl works with password
    command: curl -sS -u "admin:abcd" localhost:9154/test2
    stdout: "Test app body"

  basic180: # check curl without password
    command: curl -sS localhost:9154/test2
    stdout: "Test app body"

  basic190: # check curl works with wrong password (no authentication is done)
    command: curl -sS -u "admin:abcd2" localhost:9154/test2
    stdout: "Test app body"

  basic200: # check curl works with wrong user (no authentication is done)
    command: curl -sS -u "admin2:abcd" localhost:9154/test2
    stdout: "Test app body"

  basic250: # Clear generated files
    command: rm -rf ./testapp/static/gen ./testapp/index_gen.go.html ./testapp/config_gen.lock ./testapp/clace_gen.go.html
    exit-code: 0

  basic260: # create test3 app with auth specifically enabled. is_dev is used to check if files are created fine
    command: ../clace app create --is_dev --auth_type=default /test3 ./testapp
    exit-code: 0

  basic270: # check curl works with password
    command: curl -sS -u "admin:abcd" localhost:9154/test3
    stdout: "Test app body"

  basic280: # check curl fails without password
    command: curl -sS localhost:9154/test3
    stdout:
      exactly: "Authentication failed"

  basic290: # check curl fails with wrong password
    command: curl -sS -u "admin:abcd2" localhost:9154/test3
    stdout:
      exactly: "Authentication failed"

  basic300: # check curl fails with wrong user
    command: curl -sS -u "admin2:abcd" localhost:9154/test3
    stdout:
      exactly: "Authentication failed"

  basic400: # check version command output
    command: ../clace --version
    stdout: "Clace version"
    stderr:
      line-count: 0
    exit-code: 0

  basic500: # Test app list command
    command: ../clace app list
    stderr:
      line-count: 0
    stdout:
      line-count: 4
      contains:
        - "IsDev	Version"
        - "false	1"
    exit-code: 0
  basic510: # Test app list command with internal
    command: ../clace app list --internal
    stderr:
      line-count: 0
    stdout:
      line-count: 6 # two prod mode apps have an staging app each
      contains:
        - "IsDev	Version"
        - "app_stg_"
    exit-code: 0

  basic520: # Test app list command with filter
    command: ../clace app list "*"
    stdout:
      line-count: 4
  basic530: # Test app list command with domain filter
    command: ../clace app list "invalid:*"
    stdout:
      line-count: 1
    exit-code: 0
  basic540: # Test app list command with app filter
    command: ../clace app list /test2*
    stdout:
      line-count: 2
    exit-code: 0
  basic550: # Test app list command with jsonl format
    command: ../clace app list --format jsonl /test2*
    stdout:
      contains:
        - '"is_dev":false,'
      line-count: 1
    exit-code: 0
  basic560: # Test app list command with csv format
    command: ../clace app list --format csv /test2*
    stdout:
      contains:
        - "false,1"
      line-count: 1
    exit-code: 0
  basic570: # Test app list command with json format
    command: ../clace app list --format json /test2*
    stdout:
      contains:
        - '"is_dev": false,'
    exit-code: 0
  basic580: # Test app list command with jsonl_pretty format
    command: ../clace app list --format jsonl_pretty /test2
    stdout:
      contains:
        - '"is_dev": false,'
    exit-code: 0
  basic590: # Reload one app
    command: ../clace app reload /test2
    exit-code: 0
  basic600: # After reload, prod app should be at version 1
    command: '../clace app list --format csv /test2 | grep ",1," | wc -l'
    stdout:
      exactly: "1"
    exit-code: 0
  basic601: # After reload, stage app should be at version 2
    command: '../clace app list --internal --format csv /test2 | grep _stage | grep ",2," | wc -l'
    stdout:
      exactly: "1"
    exit-code: 0
  basic610: # Promote the change
    command: ../clace app promote /test2
    exit-code: 0
  basic620: # After promote, both are on version 2
    command: '../clace app list --internal --format csv /test2 | grep ",2," | wc -l'
    stdout:
      exactly: "2"
    exit-code: 0
  basic630: # Promote the change again, no op
    command: ../clace app promote /test2
    exit-code: 0
  basic640: # After promote, both are on version 2
    command: '../clace app list --internal --format csv /test2* | grep ",2," | wc -l'
    stdout:
      exactly: "2"
    exit-code: 0
  basic650: # Reload with promote option
    command: ../clace app reload --promote /test2
    exit-code: 0
  basic660: # Both are on version 3
    command: '../clace app list --internal --format csv /test2 | grep ",3," | wc -l'
    stdout:
      exactly: "2"
    exit-code: 0
